{"version":3,"sources":["Components/AnimeShelf.js","Components/AnimeList.js","Components/animeInfo.js","Components/Navs.js","Components/CartPage.js","Components/Comment.js","Components/Error.js","App.js","serviceWorker.js","index.js"],"names":["AnimeShelf","props","handleClick","e","preventDefault","addNewAnime","anime","handleRemoveAnime","removeAnime","showDetails","setState","details","type","episodes","start_date","end_date","score","state","counter","this","filter","item","title","className","style","width","src","image_url","alt","marginRight","onClick","length","Component","AnimeList","allAnimes","topAnimes","map","index","key","animeInfo","Navs","data-toggle","data-target","aria-controls","aria-expanded","aria-label","to","id","CartPage","allCart","carts","maxWidth","clearAllAnime","Comment","useState","comment","setComment","inputValue","setInputValue","htmlFor","rows","placeholder","onChange","target","value","console","log","Error","App","indexAnime","indexOf","splice","animes","Axios","get","then","result","animeData","data","top","catch","err","error","basename","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f1d8bed.chunk.js","sourcesContent":["import React, { Component } from 'react'\nexport default class AnimeShelf extends Component {\n    constructor(props) {\n        super(props);\n        this.state = ({\n            details: null\n        })\n    }\n    handleClick = (e) => {\n        e.preventDefault();\n        // count = count++;\n        this.props.addNewAnime(this.props.anime);\n    }\n    handleRemoveAnime = (e) => {\n        e.preventDefault();\n        this.props.removeAnime(this.props.anime);\n    }\n    showDetails = (anime) => {\n        this.setState({\n            details: <div>\n                <h3>Type : {anime.type}</h3>\n                <h3>Episode : {anime.episodes}</h3>\n                <h3>Release date : {anime.start_date}</h3>\n                <h3>Final episode date : {anime.end_date}</h3>\n                <h3>Score : {anime.score}</h3>\n            </div>\n        })\n    }\n    render() {\n        const counter = this.props.counter.filter(item => {\n            return item.title === this.props.anime.title;\n        })\n        return (\n            <div className=\"card text-white bg-secondary border-info rounded \" style={{ width: '18rem' }}>\n                <div className=\"card-body\">\n                    <img src={this.props.anime.image_url} className=\"card-img-top rounded\" alt={this.props.anime.title} />\n                    <h5 className=\"card-title\">{this.props.anime.title}</h5>\n                    <p className=\"card-text\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Corporis exercitationem cum eligendi voluptatum harum fugit perspiciatis deserunt doloribus deleniti labore perferendis et fugiat, laboriosam reiciendis dolor aut! Illo, aliquid beatae!</p>\n                    <button type=\"button\" className=\"btn btn-warning\" style={{ marginRight: '10px' }} onClick={this.handleClick} > <li className=\"material-icons\">add_shopping_cart </li><span className=\"badge badge-info\">{counter.length === 0 ? \"\" : counter.length}</span>\n                    </button>\n                    <button className=\"btn btn-info\" onClick={() => this.showDetails(this.props.anime)}><i className=\"material-icons\">more_horiz</i></button>\n                </div>\n                \n\n                {this.state.details}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport AnimeShelf from './AnimeShelf'\nexport default class AnimeList extends Component {\n    render() {\n        const allAnimes = this.props.topAnimes.map((anime, index) => {\n            return <AnimeShelf anime={anime} key={index} addNewAnime={this.props.addNewAnime} counter={this.props.counter}/>\n        })\n        return (\n            <div className=\"wrapper\">\n                {allAnimes}\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nconst animeInfo = (props) => {\n    return (\n        <div>\n            <h1>DETAILS</h1>\n        </div>\n    )\n}\n\nexport default animeInfo\n","import React from 'react';\nimport { Link } from 'react-router-dom'\nconst Navs = () => {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarTogglerDemo03\" aria-controls=\"navbarTogglerDemo03\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <Link className=\"navbar-brand\" to=\"/\"><span className=\"material-icons md-36\">menu_book</span>logo </Link>\n\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo03\">\n                <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n                    {/* <li className=\"nav-item active\"> */}\n                    {/* <Link className=\"nav-link\" to=\"/\">Home <span className=\"material-icons md-36\">menu_book</span></Link> */}\n                    {/* </li> */}\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/CartPage\">Cart <span className=\"material-icons md-36\">shopping_cart</span> </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/Comments\"><span className=\"material-icons\">feedback</span> feedback </Link>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\n\n\n\nexport default Navs;","import React from 'react'\n\nconst CartPage = (props) => {\n    \n    const allCart = props.carts.map((anime, index) => {\n        return (\n            // <div key={index}>\n            //     <img src={anime.image_url} alt={anime.title} />\n            //     <h1>{anime.title}</h1>\n            //     <button onClick={() => props.removeAnime(anime)}>Remove item</button>\n            // </div>\n            <div key={index} className=\"card mb-3\" style={{maxWidth: '540px'}}>\n            <div className=\"row no-gutters\">\n                <div className=\"col-md-4\">\n                    <img src={anime.image_url} className=\"card-img\" alt=\"...\" />\n                </div>\n                <div className=\"col-md-8\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{anime.title}</h5>\n                        <p className=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n                        <p className=\"card-text\"><small className=\"text-muted\">Last updated 3 mins ago</small></p>\n                    </div>\n                </div>\n                \n            </div>\n            <button className=\"btn btn-warning\" onClick={() => props.removeAnime(anime)}>Remove item <i className=\"material-icons\">\nclear\n</i></button>\n        </div>\n        )\n    });\n    const showCarts = () => {\n        if (allCart.length <= 0) {\n            return <h1>Empty</h1>\n        } else {\n            return allCart;\n        }\n    }\n    return (\n        <>\n        <div className=\"wrapper\">\n            {showCarts()}\n        </div>\n        < button type=\"button\" className=\"btn btn-danger\" onClick={() => props.clearAllAnime()} > Clear all items! </button>\n        </>\n    )\n}\nexport default CartPage;","import React, { useState } from 'react';\n\nconst Comment = (props) => {\n    const [comment, setComment] = useState(''); //equlaivant to this.state ... this works with func components \n    const [inputValue, setInputValue] = useState(''); //to get the value from text area\n    const handleChange = (e) => {\n        // console.log(inputValue);\n        setInputValue(e.target.value);\n\n    }\n    const handleToggle = () => {\n        console.log(\"hide or show\");\n        \n    }\n    return (\n<>\n<div className=\"form-group\">\n    <label htmlFor=\"exampleFormControlTextarea1\">Example textarea</label>\n    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"3\" placeholder=\"add comment\" onChange={handleChange}></textarea>\n    <button type=\"button\" className=\"btn btn-secondary btn-lg\" onClick={() => setComment(comment + inputValue)}>add</button>\n</div>\n<div className=\"hide\">\n    <p>{comment}</p>\n    <button type=\"button\" className=\"btn btn-secondary btn-lg\" onClick={handleToggle}>edit</button>\n</div>\n</>\n    )\n}\n\nexport default Comment\n\n","import React from 'react'\nimport {  Link } from 'react-router-dom'\n\nconst Error = (props) => {\n    return (\n        <div>\n            <h1>Page not found</h1>\n            <h1>404</h1>\n            <Link to='/'>Go home</Link>\n        </div>\n    )\n}\n\nexport default Error;","import React, { Component } from 'react'\nimport Axios from 'axios'\nimport AnimeList from './Components/AnimeList'\nimport AnimeInfo from './Components/animeInfo'\nimport Navs from './Components/Navs';\nimport CartPage from './Components/CartPage'\nimport Comment from './Components/Comment'\nimport Error from './Components/Error'\nimport { BrowserRouter as HashRouter, Route,  Switch } from 'react-router-dom';\nimport './App.css'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      animes: [],\n      carts : [],\n    }\n  }\n\n  addNewAnime = (anime) => {\n    this.setState({\n      carts : [anime, ...this.state.carts] //edit the orginial list and add new item to the original list\n    })\n  }\n  removeAnime = (anime) => {\n    const carts = [...this.state.carts] //copy of the orginial array\n    const indexAnime = carts.indexOf(anime); //get the index\n    carts.splice(indexAnime, 1); // remove the item\n    this.setState({carts}); //assign it to the original array\n  }\n  clearAllAnime = () => {\n    this.setState({\n      carts : []\n    })\n  }\n  componentDidMount() {\n    Axios.get('https://api.jikan.moe/v3/top/anime')\n      .then((result) => {\n        const animeData = result.data.top; // assign the data from API to the animeDate variable\n        this.setState({\n          animes: animeData //add these list to the animes props\n        });\n      }).catch((err) => {\n        console.error('thi is error', err);\n      });\n  }\n\n  render() {\n    console.log(this.state.carts);\n    return (\n      <HashRouter basename=\"/mangalib\">\n        <div>\n          <Navs />\n        </div>\n        <div>\n          <Switch>\n            <Route exact path='/' component={() => <AnimeList counter={this.state.carts} topAnimes={this.state.animes} addNewAnime={this.addNewAnime}/>} removeAnime={this.removeAnime}/>\n            {/* in order to send data from App to another link Using the route.. we pass it using function. the next line will do it*/}\n            <Route path='/animeinfor' component={() => <AnimeInfo />} />\n            <Route path='/CartPage' component={() => <CartPage  removeAnime={this.removeAnime} carts={this.state.carts} clearAllAnime={this.clearAllAnime}/>} />\n            <Route path='/Comments' render={(props)=> (<Comment {...this.props}/>)}/>\n            <Route component={Error} />\n          </Switch>\n        </div>\n      </HashRouter>\n\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}