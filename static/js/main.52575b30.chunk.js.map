{"version":3,"sources":["Components/AnimeShelf.js","Components/AnimeList.js","Components/animeInfo.js","Components/Navs.js","Components/CartPage.js","Components/Error.js","App.js","serviceWorker.js","index.js"],"names":["AnimeShelf","props","handleClick","e","preventDefault","setState","prevState","count","addNewAnime","anime","handleRemoveAnime","removeAnime","showDetails","details","title","episodes","state","this","counter","filter","item","className","style","width","src","image_url","alt","onClick","Component","AnimeList","allAnimes","topAnimes","map","index","key","animeInfo","Navs","to","CartPage","allCart","carts","length","clearAllAnime","Error","App","indexAnime","indexOf","splice","animes","Axios","get","then","result","animeData","data","top","catch","err","console","error","log","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52575b30.chunk.js","sourcesContent":["import React, { Component } from 'react'\nexport default class AnimeShelf extends Component {\n    constructor(props) {\n        super(props);\n        this.state = ({\n            count: 0,\n            details: null\n        })\n    }\n    handleClick = (e) => {\n        e.preventDefault();\n        this.setState(prevState => {\n            count: prevState.count++\n        });\n        // count = count++;\n        this.props.addNewAnime(this.props.anime);\n    }\n    handleRemoveAnime = (e) => {\n        e.preventDefault();\n        this.props.removeAnime(this.props.anime);\n    }\n    showDetails = (anime) => {\n        this.setState({\n            details: <div>\n                <h1>{anime.title}</h1>\n                <h2>{anime.episodes}</h2>\n            </div>\n        })\n\n\n    }\n    render() {\n        const counter = this.props.counter.filter(item => {\n            return item.title === this.props.anime.title;\n        })\n        return (\n                <div className=\"card\" style={{ width: '30%' }}>\n                        <div className=\"card-body\">\n                        <img src={this.props.anime.image_url} className=\"card-img-top\" alt={this.props.anime.title}/>\n                            <h5 className=\"card-title\">{this.props.anime.title}</h5>\n                            <p className=\"card-text\">With supporting text below as a natural lead-in to additional content.</p>\n                            <a className=\"btn btn-primary\" onClick={this.handleClick} >add to cart</a>\n                            <a className=\"btn btn-primary\" onClick={() => this.showDetails(this.props.anime)}>more details</a>\n                        </div>\n                    </div>\n\n            // <div className=\"card\" style={{maxWidth: '500px'}}>\n            //     <img src={this.props.anime.image_url} className=\"card-img-top\" alt=\"fhd\"/>\n            //         <div class=\"card-body\">\n            //             <h5 className=\"card-title\">{this.props.anime.title}</h5>\n            //             {/* <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p> */}\n            //             <a className=\"btn btn-primary\">quick add to cart</a>\n\n            //             <a className=\"btn btn-primary\">Show more details</a>\n            //         </div>\n            //         {/* <div>\n            //         <img src={this.props.anime.image_url} alt={this.props.anime.title} />\n            //         <span>{counter.length}</span>\n            //         <div>\n            //             <h1>{this.props.anime.title}</h1>\n            //         </div>\n            //         <button onClick={this.handleClick}>Quick add to scarts</button>\n            //         <button onClick={() => this.showDetails(this.props.anime)}>More details</button>\n            //         {this.state.details}\n            //     </div> */}\n            // </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport AnimeShelf from './AnimeShelf'\nexport default class AnimeList extends Component {\n    render() {\n        const allAnimes = this.props.topAnimes.map((anime, index) => {\n            return <AnimeShelf anime={anime} key={index} addNewAnime={this.props.addNewAnime} counter={this.props.counter}/>\n        })\n        return (\n            <div className=\"wrapper\">\n                {allAnimes}\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nconst animeInfo = (props) => {\n    return (\n        <div>\n            <h1>DETAILS</h1>\n        </div>\n    )\n}\n\nexport default animeInfo\n","import React from 'react';\nimport { Link } from 'react-router-dom'\nconst Navs = () => {\n    return (\n        <nav className=\"navbar navbar-expand-lg p-3 p-3 mb-2 bg-dark \">\n            <Link className=\"navbar-brand text-white\" to=\"/\">Home</Link>\n            <Link className=\"navbar-brand text-white\" to=\"/CartPage\">myCart </Link>\n            <Link className=\"navbar-brand text-white\" to=\"/search\">Search</Link>\n\n        </nav>\n        // <>\n\n        //         <Link className=\"\"to=\"/\">Home</Link>\n        //         <Nav className=\"mr-auto\">\n        //             <Link to=\"/CartPage\">Search</Link>\n        //         </Nav>\n        //         {/* <Form inline>\n        //             <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n        //             <Button variant=\"outline-info\">Search</Button>\n        //         </Form> */}\n        //     </Navbar>\n        //     <br />\n        // </>\n        // <nav>\n        //     <div>\n        //         <Link to=\"/\" >Home</Link>\n        //         <ul>\n        //             <li><Link to=\"/search\">Search</Link></li>\n        //             <li><Link to=\"/CartPage\">My cart</Link></li>\n        //             {/* <li><Link to=\"/cart\"><i className=\"material-icons\">shopping_cart</i></Link></li> */}\n        //         </ul>\n        //     </div>\n        // </nav>\n    )\n}\n\nexport default Navs;","import React from 'react'\n\nconst CartPage = (props) => {\n    const allCart = props.carts.map((anime, index) => {\n        return (\n            <div key={index}>\n                <img src={anime.image_url} alt={anime.title} />\n                <h1>{anime.title}</h1>\n                <button onClick={() => props.removeAnime(anime)}>Remove item</button>\n            </div>\n        )\n    });\n    const showCarts = () => {\n        if (allCart.length <= 0) {\n            return <h1>Empty</h1>\n        } else {\n            return allCart\n        }\n    }\n    return (\n        <div>\n            {showCarts()}\n            < button onClick={() => props.clearAllAnime()} > Clear all items! </button>\n\n        </div>\n\n    )\n}\nexport default CartPage;","import React from 'react'\nimport {  Link } from 'react-router-dom'\n\nconst Error = (props) => {\n    return (\n        <div>\n            <h1>Page not found</h1>\n            <h1>404</h1>\n            <Link to='/'>Go home</Link>\n        </div>\n    )\n}\n\nexport default Error;","import React, { Component } from 'react'\nimport Axios from 'axios'\nimport AnimeList from './Components/AnimeList'\nimport AnimeInfo from './Components/animeInfo'\nimport Navs from './Components/Navs';\nimport CartPage from './Components/CartPage'\nimport Error from './Components/Error'\nimport { BrowserRouter as HashRouter, Route, Link, Switch } from 'react-router-dom';\nimport './App.css'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      animes: [],\n      carts : [],\n    }\n  }\n\n  addNewAnime = (anime) => {\n    this.setState({\n      carts : [anime, ...this.state.carts] //edit the orginial list and add new item to the original list\n    })\n  }\n  removeAnime = (anime) => {\n    const carts = [...this.state.carts] //copy of the orginial array\n    const indexAnime = carts.indexOf(anime); //get the index\n    carts.splice(indexAnime, 1); // remove the item\n    this.setState({carts}); //assign it to the original array\n  }\n  clearAllAnime = () => {\n    this.setState({\n      carts : []\n    })\n  }\n  componentDidMount() {\n    Axios.get('https://api.jikan.moe/v3/top/anime')\n      .then((result) => {\n        const animeData = result.data.top; // assign the data from API to the animeDate variable\n        this.setState({\n          animes: animeData //add these list to the animes props\n        });\n      }).catch((err) => {\n        console.error('thi is error', err);\n      });\n  }\n\n  render() {\n    console.log(this.state.carts);\n    return (\n      <HashRouter basename=\"/mangalib\">\n        <div>\n          <Navs />\n        </div>\n        <div>\n          <Switch>\n            <Route exact path='/' component={() => <AnimeList counter={this.state.carts} topAnimes={this.state.animes} addNewAnime={this.addNewAnime}/>} removeAnime={this.removeAnime}/>\n            {/* in order to send data from App to another link Using the route.. we pass it using function. the next line will do it*/}\n            <Route path='/animeinfor' component={() => <AnimeInfo />} />\n            <Route path='/CartPage' component={() => <CartPage  removeAnime={this.removeAnime} carts={this.state.carts} clearAllAnime={this.clearAllAnime}/>} />\n            <Route component={Error} />\n          </Switch>\n        </div>\n      </HashRouter>\n\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}