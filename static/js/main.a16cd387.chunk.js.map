{"version":3,"sources":["Components/AnimeShelf.js","Components/AnimeList.js","Components/animeInfo.js","Components/Navs.js","Components/CartPage.js","Components/Comment.js","Components/Error.js","App.js","serviceWorker.js","index.js"],"names":["AnimeShelf","props","handleClick","e","preventDefault","setState","prevState","count","addNewAnime","anime","handleRemoveAnime","removeAnime","showDetails","details","title","episodes","state","counter","this","filter","item","className","style","width","src","image_url","alt","type","onClick","length","Component","AnimeList","allAnimes","topAnimes","map","index","key","animeInfo","Navs","to","CartPage","allCart","carts","maxWidth","clearAllAnime","Comment","useState","comment","setComment","inputValue","setInputValue","htmlFor","id","rows","placeholder","onChange","target","value","console","log","Error","App","indexAnime","indexOf","splice","animes","Axios","get","then","result","animeData","data","top","catch","err","error","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a16cd387.chunk.js","sourcesContent":["import React, { Component } from 'react'\nexport default class AnimeShelf extends Component {\n    constructor(props) {\n        super(props);\n        this.state = ({\n            count: 0,\n            details: null\n        })\n    }\n    handleClick = (e) => {\n        e.preventDefault();\n        this.setState(prevState => {\n            count: prevState.count++\n        });\n        // count = count++;\n        this.props.addNewAnime(this.props.anime);\n    }\n    handleRemoveAnime = (e) => {\n        e.preventDefault();\n        this.props.removeAnime(this.props.anime);\n    }\n    showDetails = (anime) => {\n        this.setState({\n            details: <div>\n                <h1>{anime.title}</h1>\n                <h2>{anime.episodes}</h2>\n            </div>\n        })\n\n\n    }\n    render() {\n        const counter = this.props.counter.filter(item => {\n            return item.title === this.props.anime.title;\n        })\n        return (\n            <div className=\"card text-white bg-secondary border-info rounded \" style={{ width: '18rem' }}>\n                <div className=\"card-body\">\n                    <img src={this.props.anime.image_url} className=\"card-img-top rounded\" alt={this.props.anime.title} />\n                    <h5 className=\"card-title\">{this.props.anime.title}</h5>\n                    <p className=\"card-text\">With supporting text below as a natural lead-in to additional content.</p>\n                    <button type=\"button\" className=\"btn btn-warning\" onClick={this.handleClick} >add to cart <span className=\"badge badge-info\">{counter.length === 0 ? \"\" : counter.length}</span>\n                    </button>\n                    <button className=\"btn btn-info\" onClick={() => this.showDetails(this.props.anime)}>more details</button>\n                </div>\n                <h4></h4>\n            \n                {this.state.details}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport AnimeShelf from './AnimeShelf'\nexport default class AnimeList extends Component {\n    render() {\n        const allAnimes = this.props.topAnimes.map((anime, index) => {\n            return <AnimeShelf anime={anime} key={index} addNewAnime={this.props.addNewAnime} counter={this.props.counter}/>\n        })\n        return (\n            <div className=\"wrapper\">\n                {allAnimes}\n            </div>\n        )\n    }\n}\n","import React from 'react'\n\nconst animeInfo = (props) => {\n    return (\n        <div>\n            <h1>DETAILS</h1>\n        </div>\n    )\n}\n\nexport default animeInfo\n","import React from 'react';\nimport { Link } from 'react-router-dom'\nconst Navs = () => {\n    return (\n        <nav className=\" navbar navbar-expand-lg p-3 p-3 mb-2 bg-dark\">\n            <Link className=\"navbar-brand text-white\" to=\"/\">Home</Link>\n            <Link className=\"navbar-brand text-white\" to=\"/CartPage\">myCart </Link>\n            <Link className=\"navbar-brand text-white\" to=\"/Comments\">comment</Link>\n        </nav>\n    )\n}\n\nexport default Navs;","import React from 'react'\n\nconst CartPage = (props) => {\n    \n    const allCart = props.carts.map((anime, index) => {\n        return (\n            // <div key={index}>\n            //     <img src={anime.image_url} alt={anime.title} />\n            //     <h1>{anime.title}</h1>\n            //     <button onClick={() => props.removeAnime(anime)}>Remove item</button>\n            // </div>\n            <div key={index} className=\"card mb-3\" style={{maxWidth: '540px'}}>\n            <div className=\"row no-gutters\">\n                <div className=\"col-md-4\">\n                    <img src={anime.image_url} className=\"card-img\" alt=\"...\" />\n                </div>\n                <div className=\"col-md-8\">\n                    <div className=\"card-body\">\n                        <h5 className=\"card-title\">{anime.title}</h5>\n                        <p className=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n                        <p className=\"card-text\"><small className=\"text-muted\">Last updated 3 mins ago</small></p>\n                    </div>\n                </div>\n                \n            </div>\n            <button className=\"btn btn-warning\" onClick={() => props.removeAnime(anime)}>Remove item</button>\n        </div>\n        )\n    });\n    const showCarts = () => {\n        if (allCart.length <= 0) {\n            return <h1>Empty</h1>\n        } else {\n            return allCart;\n        }\n    }\n    return (\n        <>\n        <div className=\"wrapper\">\n            {showCarts()}\n        </div>\n        < button type=\"button\" className=\"btn btn-danger\" onClick={() => props.clearAllAnime()} > Clear all items! </button>\n        </>\n    )\n}\nexport default CartPage;","import React, { useState } from 'react';\n\nconst Comment = (props) => {\n    const [comment, setComment] = useState(''); //equlaivant to this.state ... this works with func components \n    const [inputValue, setInputValue] = useState(''); //to get the value from text area\n    const handleChange = (e) => {\n        // console.log(inputValue);\n        setInputValue(e.target.value);\n    }\n    const handleClick = (e) => {\n        // console.log(inputValue);\n        setComment(inputValue);\n    }\n    const handleToggle = () => {\n        console.log(\"hide or show\");\n        \n    }\n    return (\n<>\n<div className=\"form-group\">\n    <label htmlFor=\"exampleFormControlTextarea1\">Example textarea</label>\n    <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"3\" placeholder=\"add comment\" onChange={handleChange}></textarea>\n    <button type=\"button\" className=\"btn btn-secondary btn-lg\" onClick={handleClick}>add</button>\n</div>\n<div className=\"hide\">\n    <p>{comment}</p>\n    <button type=\"button\" className=\"btn btn-secondary btn-lg\" onClick={handleToggle}>edit</button>\n</div>\n</>\n    )\n}\n\nexport default Comment\n\n","import React from 'react'\nimport {  Link } from 'react-router-dom'\n\nconst Error = (props) => {\n    return (\n        <div>\n            <h1>Page not found</h1>\n            <h1>404</h1>\n            <Link to='/'>Go home</Link>\n        </div>\n    )\n}\n\nexport default Error;","import React, { Component } from 'react'\nimport Axios from 'axios'\nimport AnimeList from './Components/AnimeList'\nimport AnimeInfo from './Components/animeInfo'\nimport Navs from './Components/Navs';\nimport CartPage from './Components/CartPage'\nimport Comment from './Components/Comment'\nimport Error from './Components/Error'\nimport { BrowserRouter as HashRouter, Route, Link, Switch } from 'react-router-dom';\nimport './App.css'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      animes: [],\n      carts : [],\n    }\n  }\n\n  addNewAnime = (anime) => {\n    this.setState({\n      carts : [anime, ...this.state.carts] //edit the orginial list and add new item to the original list\n    })\n  }\n  removeAnime = (anime) => {\n    const carts = [...this.state.carts] //copy of the orginial array\n    const indexAnime = carts.indexOf(anime); //get the index\n    carts.splice(indexAnime, 1); // remove the item\n    this.setState({carts}); //assign it to the original array\n  }\n  clearAllAnime = () => {\n    this.setState({\n      carts : []\n    })\n  }\n  componentDidMount() {\n    Axios.get('https://api.jikan.moe/v3/top/anime')\n      .then((result) => {\n        const animeData = result.data.top; // assign the data from API to the animeDate variable\n        this.setState({\n          animes: animeData //add these list to the animes props\n        });\n      }).catch((err) => {\n        console.error('thi is error', err);\n      });\n  }\n\n  render() {\n    console.log(this.state.carts);\n    return (\n      <HashRouter basename=\"/mangalib\">\n        <div>\n          <Navs />\n        </div>\n        <div>\n          <Switch>\n            <Route exact path='/' component={() => <AnimeList counter={this.state.carts} topAnimes={this.state.animes} addNewAnime={this.addNewAnime}/>} removeAnime={this.removeAnime}/>\n            {/* in order to send data from App to another link Using the route.. we pass it using function. the next line will do it*/}\n            <Route path='/animeinfor' component={() => <AnimeInfo />} />\n            <Route path='/CartPage' component={() => <CartPage  removeAnime={this.removeAnime} carts={this.state.carts} clearAllAnime={this.clearAllAnime}/>} />\n            <Route path='/Comments' component={()=> <Comment/>}/>\n            <Route component={Error} />\n          </Switch>\n        </div>\n      </HashRouter>\n\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}